
var OrderAlert = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="orderAlert">
        <h2 className="orderAlertCust">
          <span> {this.props.customer} - {this.props.opco}</span>
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var OrderAlertView = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="orderAlertView">
        <h1>Order Alerts</h1>
        <OrderAlertsList data={this.state.data} />
      </div>
    );
  }
});

var OrderAlertsList = React.createClass({
  render: function() {
    var orderAlertNodes = this.props.data.map(function(orderAlert) {
      return (
        <OrderAlert
          customer={orderAlert.customer}
          key={orderAlert.opco}
          opco={orderAlert.opco}
        >
          {orderAlert.text}
        </OrderAlert>
      );
    });
    return (
      <div className="orderAlertsList">
        {orderAlertNodes}
      </div>
    );
  }
});

ReactDOM.render(
  <OrderAlertView url="/api/order-alerts" pollInterval={10000} />,
  document.getElementById('content')
);
